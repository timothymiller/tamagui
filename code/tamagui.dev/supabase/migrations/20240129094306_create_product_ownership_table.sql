create table "public"."product_ownership" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "price_id" text,
    "user_id" uuid
);


alter table "public"."product_ownership" enable row level security;

CREATE UNIQUE INDEX product_ownership_pkey ON public.product_ownership USING btree (id);

alter table "public"."product_ownership" add constraint "product_ownership_pkey" PRIMARY KEY using index "product_ownership_pkey";

alter table "public"."product_ownership" add constraint "product_ownership_price_id_fkey" FOREIGN KEY (price_id) REFERENCES prices(id) not valid;

alter table "public"."product_ownership" validate constraint "product_ownership_price_id_fkey";

alter table "public"."product_ownership" add constraint "product_ownership_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."product_ownership" validate constraint "product_ownership_user_id_fkey";

create policy "User can retrieve their own product ownerships"
on "public"."product_ownership"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));



